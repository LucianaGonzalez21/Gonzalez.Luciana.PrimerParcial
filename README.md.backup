# Gonzalez.Luciana.PrimerParcial

**Titulo**: Aplicación de Aerolineas

**Sobre mí**: Mi nombre es Luciana Gonzalez y soy estudiante del segundo cuatrimestre de la carrera de programación en la Universidad Tecnológica Nacional.
Este trabajo fue un verdadero desafío para mí, porque en mi corta experiencia programando nunca había tenido que plantear un proyecto desde cero. Al principio no tenía idea hacia donde ir, pero de a poco fui construyendo, y así llegué a realizar esta aplicación. 
Lo que más me llevo de esto es que aprendí a buscar información por mi cuenta a través de internet y no tanto a esperar que alguien me explique. 

**Resumen**: esta aplicación administra los servicios que ofrece una aerolínea: vuelos nacionales e internacionales. Está pensada para que los empleados puedan loguearse y poder visualizar los siguientes datos:

* Una lista de los aviones que posee la aerolínea, con sus características tales como sus matrículas, la cantidad de asientos disponibles o si ofrece wifi o comida.
* Una lista de clientes: aquellas personas que se han registrado pero aún no han realizado una compra en la empresa.
* Una lista de vuelos donde se detallan el origen y destino de cada vuelo, así como el estado de vuelo, su duración y la fecha de partida.
* Una lista de pasajeros: aquellos clientes que adquirieron uno o más vuelos en la empresa.
* Una lista de pasajes donde se ve el nombre del pasajero y hacia dónde viaja.

Además, los empleados podrán vender pasajes tanto individuales como a un grupo familiar, pudiendo elegir origen, destino y algunas características del avión (wifi, comida). La aplicación mostrará una lista de vuelos que cumplan con los requisitos de los clientes y así poder efectuar una venta. Asimismo, se verifica que exista disponibilidad en el avión del vuelo en el que se pretende viajar. 

También cuenta con un apartado donde se pueden ver algunas estadísticas de la empresa: los destinos más elegidos, la cantidad de viajes que realizó cada cliente o las horas de vuelo de cada aeronave de la empresa.

Verificaciones:
* Alta Cliente: no se podrán registrar personas que ya se encuentren en el sistema. La validación es por el DNI.
* Alta Vuelo: si un avión tiene un vuelo en determinada fecha, no podrá elegirse para otro vuelo en ese mismo día.
* Alta Pasaje: si un cliente ya se encuentra asociado a un vuelo, no podrá sacar otro pasaje para el mismo.

Ayuda (Tool Tip): en el formulario principal, al apoyar el cursor sobre cada botón, se muestra un mensaje que informa acerca de la función de cada uno.

**Diagrama de clases**


**Justificación de técnica**: 

* **Clases estáticas**: el core de la aplicación, Aerolinea, es una clase estática ya que no se instancian objetos de este tipo; la aerolínea es una sola y es el negocio. Esta clase funciona como administradora de las demás: verifica si los clientes ya existen, si al dar de alta un vuelo el avión seleccionado se encuentra en otro, los destinos más elegidos por los clientes, etc. 

* **Windows Form**: la aplicación usa como interfaz gráfica a los formularios de Windows: a través de ellos se pueden visualizar las listas antes mencionadas, vender pasajes y dar de alta a nuevos clientes. Estos formularios toman la información ingresada por el empleado, la valida y a su vez, la clase administradora (Aerolinea) hace sus propias validaciones. 

* **Colecciones**: la clase Aerolínea posee listas de usuarios, vuelos, pasajes, etc. También cuenta con un diccionario donde la clave representa los destinos y el valor es un contador que va sumando en uno cada vez que se da de alta un pasaje. Dentro del formulario donde se da de alta un grupo de pasajes, tiene un Stack de pasajes. Cada objeto instanciado se agrega a la pila, antes validando que no exista ya en la lista de pasajes.

* **Clases abstractas y herencia**: la clase Persona es abstracta y funciona como la base de una jerarquía de herencia. No se instanciarán objetos del tipo Persona pero sirve como molde para las clases que heredan de ella: Cliente, Pasajero y PasajeroPremium.

* **Sobrecarga de métodos**: en el formulario para elegir vuelo, se puede filtrar por origen, destino y servicios de wifi y comida o sólo por los servicios de wifi y comida, por la sobrecarga del método FiltrarVuelos(), que devuelve una lista que cumpla con los parámetros recibidos.

* **Sobrecarga de operadores**: para efectuar comparaciones entre Clientes o Pasajes, y así poder saber si un cliente ya está cargado en el sistema, o si un pasajero está intentando comprar un boleto para un vuelo en el que ya se encuentra registrado, utilicé sobrecarga del operador == y !=

* **Polimorfismo**: La clase abstracta Alojamiento declara la firma del método abstracto DefinirCosto(), sus clases derivadas, Hotel y Cabania, lo sobrescriben para devolver el costo del alojamiento según el tipo que sea.

**Funcionalidad extra**

Los clientes que deseen adquirir un pasaje podrán elegir también un alojamiento: hotel o cabaña. Deberá elegirse el tipo y la cantidad de días de la estadía. Antes de dar de alta un pasaje, se podrán visualizar los costos por el vuelo y por el alojamiento, si es que se eligió.

